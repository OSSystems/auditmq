// Code generated by MockGen. DO NOT EDIT.
// Source: publisher/publisher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/rodrigoapereira/auditmq/storage"
	reflect "reflect"
)

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishServiceStatus mocks base method
func (m *MockPublisher) PublishServiceStatus(service storage.Service) error {
	ret := m.ctrl.Call(m, "PublishServiceStatus", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishServiceStatus indicates an expected call of PublishServiceStatus
func (mr *MockPublisherMockRecorder) PublishServiceStatus(service interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishServiceStatus", reflect.TypeOf((*MockPublisher)(nil).PublishServiceStatus), service)
}

// PublishGlobalStat mocks base method
func (m *MockPublisher) PublishGlobalStat() error {
	ret := m.ctrl.Call(m, "PublishGlobalStat")
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishGlobalStat indicates an expected call of PublishGlobalStat
func (mr *MockPublisherMockRecorder) PublishGlobalStat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishGlobalStat", reflect.TypeOf((*MockPublisher)(nil).PublishGlobalStat))
}
